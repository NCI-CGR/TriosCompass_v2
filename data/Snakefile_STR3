import glob
import peds 
import uuid

# bam/SC501095.recal.bam
bam_files = glob.glob("output/fixed-rg/*.bam", recursive=True)
_,ids,_= glob_wildcards("{path}/{id,SC[0-9]+}.{any,.*}bam", bam_files)

BAM_DICT=dict(zip(ids,bam_files))

# print(bam_files)
# print(BAM_DICT)
# exit(0)

### Define trios
ped_files = glob.glob("ped_files/*.ped")

split_total= 400
CHUNKS =[str(x).zfill(5) for x in range(split_total)]

families = {}
SEX_DICT={}
for fn in ped_files:
    f=peds.open_ped(fn)[0]
    families[f.id]=f
    for person in f:
        SEX_DICT[person.id] = 'M' if person.is_male() else 'F'


# fam_ids = [f.id for f in famimiles]
# 8trios.lst
fam_ids = [line.strip() for line in open("8trios.lst", "r")]
CHRS = ['chr{}'.format(x) for x in list(range(1,23))]
chrX='chrX'
CHRS.append(chrX)

SEX_DICT = {k: SEX_DICT[k] for k in ids }
# print(SEX_DICT)
# exit(0)

# print(CHRS)

# t0334   SC074198        0       0       1       1
# t0334   SC074199        0       0       2       1
# t0334   SC074201        SC074198        SC074199        1       1

# ids = ['SC074198', 'SC074199', 'SC074201']
# sex = ['M','F','M']
hg38_ref="ref/Homo_sapiens_assembly38.fasta"
gangstr_panel = "STR/hg38_ver13.le9.bed"
bam_list = "24bams.lst"
hipstr_panel ="STR/hg38_ver13.hipstr_9.bed"
ped_all = "8trios.ped"
hipstr_filters=" --min-span-coverage 3 --min-supp-reads 3 "
gangstr_filters=" --max-perc-encl-parent 0.05 --min-encl-match 0.9 --min-total-encl 10 --gangstr "
dup_reg = "STR/GRCh38GenomicSuperDup.bed.gz" # come with GRCh38GenomicSuperDup.bed.gz.tbi 
output_dir = "output"
# SEX_DICT=dict(zip(ids,sex))
# print(SEX_DICT)

### More code to call JIGV for each trio
fam_ids = [line.strip() for line in open("8trios.lst", "r")]

CALLERS=["hipstr", "gangstr"]

rule all:
    input:
        #expand("output/monstr/{caller}_{chunk}.all_mutations.tab", caller=CALLERS, chunk=CHUNKS),
        # "output/joint_STR/gangstr_hipstsr.final.tab",
        expand(output_dir +"/call_JIGV/both_{fam}.JIGV.html", fam=fam_ids),
        # expand(output_dir + "/vizaln/{fam}/{fam}.vcf.gz", fam=fam_ids),
        expand(output_dir + "/vizaln/{fam}/DONE", fam=fam_ids),
        expand("output/merge_monstr/{caller}.all_mutations.tab", caller = CALLERS)

rule replace_rg:
    input: lambda w: BAM_DICT[w.id]
    output:
        output_dir + "/fixed-rg/{id}.bam"
    params:
        extra="--RGLB lib1 --RGPL illumina --RGPU {id} --RGSM {id} --CREATE_INDEX true "
    benchmark:
        output_dir +"/benchmark/replace_rg/{id}.tsv"
    resources:
        mem_mb=60000,
        runtime='5d',
        threads=8,
        tmpdir=output_dir+"/TMP"
    wrapper:
        "v1.25.0/bio/picard/addorreplacereadgroups"

### split bed files first
# skip chrX for the time being
rule split_bed: 
    input: 
        hipstr_panel
    output: 
        expand(output_dir+"/splitted_panel/hipstr_{chunk}.bed", chunk=CHUNKS)
    params: 
        split_total = split_total,
        prefix=output_dir+"/splitted_panel/hipstr_"
    resources :
        mem_mb=10000
    shell: '''
        # split cannot take piped input, leading to the error of "cannot determine file size"
        # so we use tmpfile here to get around the issue
        tmpfile=$(mktemp /tmp/abc-script.XXXXXX); grep -v -e "^chrX" -e "chrY" {input} > $tmpfile; split --numeric-suffixes=0 -n l/{params.split_total} --suffix-length=5  --additional-suffix=".bed" $tmpfile {params.prefix}
    '''

use rule split_bed as split_bed_gangstr with: 
    input: 
        gangstr_panel
    output: 
        expand(output_dir+"/splitted_panel/gangstr_{chunk}.bed", chunk=CHUNKS)
    params: 
        split_total = split_total,
        prefix=output_dir+"/splitted_panel/gangstr_"


### As gangstr infor tag GRID will get lost during mergeSTR, we have to run gastr as trios
# --bam-samps sample1,sample2 --samp-sex M,F as input option.
rule gangstr:
    input: 
        bams = expand("output/fixed-rg/{id}.bam", id= ids),
        ref = hg38_ref,
        reg = output_dir+"/splitted_panel/gangstr_{chunk}.bed"
    output:
        multiext("output/gangstr/{chunk}", ".vcf", ".insdata.tab", ".samplestats.tab")
    params:
        prefix = "output/gangstr/{chunk}", 
        bams=lambda w, input: ",".join(input.bams),
        sexes=  ",".join(SEX_DICT[id] for id in ids),
        ids= ",".join(ids)
    benchmark:
        output_dir + "/benchmark/gangstr/{chunk}.tsv"
    resources:
        runtime="10h",
        mem_mb=60000
    shell: """
        GangSTR --bam {params.bams} \
            --ref {input.ref} \
            --regions {input.reg} \
            --include-ggl \
            --bam-samps {params.ids} \
            --samp-sex {params.sexes} \
            --out {params.prefix} 
    """

# Hollox/Code_availability_manuscript-07-02-2023.pdf
rule dumpstr_call:
    input: "output/gangstr/{chunk}.vcf"
    output:
        multiext("output/dumpstr_call/gangstr_{chunk}", ".vcf", ".loclog.tab", ".samplog.tab")
    params:
        prefix = "output/dumpstr_call/gangstr_{chunk}", 
        # min_dp = lambda w: 20 if (SEX_DICT[w.id] == 'M' and w.chrom=='chrX') else 40
        # min_dp = lambda w: 15 if (w.chrom=='chrX') else 30
    resources:
        runtime="10h",
        mem_mb=40000
    shell: """
        dumpSTR --vcf {input} --out {params.prefix} --gangstr-min-call-DP 15 \
            --gangstr-max-call-DP 1000 --gangstr-filter-spanbound-only \
            --gangstr-filter-badCI --vcftype gangstr --gangstr-min-call-Q 0.9 --drop-filtered
    """
    

rule hipstr:
    input: 
        bams = expand("output/fixed-rg/{id}.bam", id= ids),
        ref=hg38_ref,
        bam_list=bam_list,
        reg = output_dir+"/splitted_panel/hipstr_{chunk}.bed"
    output:
        vcf="output/hipstr/{chunk}.vcf.gz",
        viz="output/hipstr/{chunk}.aln.viz.gz",
    log: "output/hipstr/{chunk}.log"
    benchmark:
        output_dir + "/benchmark/hipstr/{chunk}.tsv"
    resources:
        runtime="200h",
        mem_mb=40000
    envmodules: "hipstr", "bcftools"
    shell: """
        HipSTR  --output-gls --bam-files  {input.bam_list} --fasta {input.ref}  --regions  {input.reg} --str-vcf  {output.vcf} --viz-out {output.viz} --def-stutter-model  --log  {log}
        tabix -p bed {output.viz}
        tabix -p vcf {output.vcf}
    """

rule dumpstr_hipstr: 
    input: "output/hipstr/{chunk}.vcf.gz"
    output:
        multiext("output/dumpstr_call/hipstr_{chunk}", ".vcf", ".loclog.tab", ".samplog.tab")
    params:
        prefix = "output/dumpstr_call/hipstr_{chunk}", 
        # min_dp = lambda w: 20 if (SEX_DICT[w.id] == 'M' and w.chrom=='chrX') else 40
        # min_dp = lambda w: 15 if (w.chrom=='chrX') else 30
    resources:
        runtime="10h",
        mem_mb=40000
    shell: """
        dumpSTR --vcf {input} --out {params.prefix} --hipstr-min-call-DP 15 \
            --hipstr-max-call-DP 1000 --hipstr-min-call-Q 0.9 --drop-filtered \
            --vcftype hipstr --hipstr-min-supp-reads 1 --hipstr-max-call-flank-indel 0.15 \
            --hipstr-max-call-stutter 0.15 
    """
    
# For chromosome X, the Hardyâ€“Weinberg equilibrium filter
# ref: 39M
rule dumpstr_locus:
    input: 
        vcf="output/dumpstr_call/{caller}_{chunk}.vcf",
        dup_reg = dup_reg
    output:
        multiext("output/dumpstr_locus/{caller}_{chunk}", ".vcf", ".loclog.tab", ".samplog.tab")
    params:
        prefix = "output/dumpstr_locus/{caller}_{chunk}"
    resources:
        runtime="20h",
        mem_mb=40000
    shell: """
        dumpSTR --min-locus-hwep 0.00001 --min-locus-callrate 0.8 \
            --filter-regions {input.dup_reg} \
                --filter-regions-names SEGDUP \
                --vcf {input.vcf} \
                --out {params.prefix}
    """


rule vcf_index: 
    input: "output/dumpstr_locus/{caller}_{chunk}.vcf"
    output: 
        gz="output/dumpstr_locus/{caller}_{chunk}.vcf.gz",
        tbi="output/dumpstr_locus/{caller}_{chunk}.vcf.gz.tbi"
    resources:
        runtime="20h",
        mem_mb=10000    
    envmodules: "bcftools"
    shell: """
        bcftools sort {input} | bgzip -c  > {output.gz}
        tabix -p vcf {output.gz}
    """

### ignore chrX for the time being
rule monstr:
    input: 
        vcf = "output/dumpstr_locus/{caller}_{chunk}.vcf.gz",
        ped = ped_all
    output: 
        multiext("output/monstr/{caller}_{chunk}", ".all_mutations.tab", ".locus_summary.tab")
    container: "docker://gymreklab/monstr"
    params:
        prefix="output/monstr/{caller}_{chunk}",
        arg = lambda w: gangstr_filters if (w.caller=='gangstr') else hipstr_filters,
        # chrX = lambda w: " --chrX " if (w.chrom=='chrX') else ""
    # envmodules: "singularity"
    resources:
        runtime="20h",
        mem_mb=40000 
    shell: """
        MonSTR  \
            --strvcf {input.vcf} \
            --fam {input.ped} \
            --out {params.prefix} \
            --min-score 0.8 \
            --min-coverage 10 \
            {params.arg} 
            
    """

rule merge_monstr:
    input: 
        mutation=expand("output/monstr/{{caller}}_{chunk}.all_mutations.tab", chunk=CHUNKS),
        summary=expand("output/monstr/{{caller}}_{chunk}.locus_summary.tab", chunk=CHUNKS)
    output: 
        mutation="output/merge_monstr/{caller}.all_mutations.tab",
        summary="output/merge_monstr/{caller}.locus_summary.tab"
    conda:
        "workflow/envs/csvtk.yaml"
    resources:
        runtime="20h",
        mem_mb=40000 
    shell: """
        csvtk concat -E -t {input.mutation} | csvtk sort -t -k chrom:N -k pos:n -k child -E - | csvtk filter -t -f "poocase>1" > {output.mutation}
        csvtk concat -E -t {input.summary} | csvtk sort -t -k chrom:N -k pos:n  -E - | csvtk filter -t -f "total_mutations>0" > {output.summary}
    """


rule monstr_filter:
    input: "output/merge_monstr/{caller}.all_mutations.tab"
    output: 
        filtered="output/monstr_filter/{caller}.filtered.tab",
        log="output/monstr_filter/{caller}.filtered.log"
    container: "docker://gymreklab/monstr"
    resources:
        runtime="2h",
        mem_mb=20000 
    shell: """
        python3 /STRDenovoTools/scripts/qc_denovos.py --all-mutations-file {input} \
                  --filtered-mutations-file {output.filtered} \
                  --log-file {output.log} \
                  --filter-denovos-child 5 \
                  --filter-loc-denovos 5 \
                  --filter-posterior 0.8 \
                  --filter-step-size
    """

rule joint_STR: 
    input: expand(output_dir + "/monstr_filter/{caller}.filtered.tab", caller=['hipstr','gangstr'])
    output: output_dir + "/joint_STR/gangstr_hipstsr.final.tab"
    conda:
        "workflow/envs/csvtk.yaml"
    shell: """
        csvtk join -t -f "chrom,pos,child,child_gt,mat_gt,pat_gt" -p {input} > {output}
    """
        
rule call_jigv: 
    input:
        bam=lambda w: expand(output_dir +"/fixed-rg/{id}.bam", id=[person.id for person in families[w.fam]]),
        ped="ped_files/{fam}.ped",
        ref=hg38_ref,
        mutation_tab="output/joint_STR/gangstr_hipstsr.final.tab",
        summary_tab="output/merge_monstr/hipstr.locus_summary.tab"
    output:
        tmp=temp(output_dir +"/call_JIGV/both_{fam}.tmp"),
        bed=output_dir +"/call_JIGV/both_{fam}.bed",
        html= output_dir +"/call_JIGV/both_{fam}.JIGV.html"
    benchmark:
        output_dir +"/benchmark/call_JIGV/both_{fam}.tsv"
    resources: 
        mem_mb = 60*1000,
        runtime= "3d"
    params: 
        proband=lambda w: [person.id for person in families[w.fam] if families[w.fam].get_father(person) ][0]
    shell: """
        # child match
        awk -v FS='\\t' -v OFS='\\t' '{{if(NR>1 && $6=="{params.proband}") print $1, $2}}' {input.mutation_tab} > {output.tmp}
        if [ -s {output.tmp} ]; then 
            # not empty 
            grep -f {output.tmp} {input.summary_tab} | awk -v FS='\\t' -v OFS='\\t' "{{ print \$1,\$2-1,\$3}}"  > {output.bed}
            jigv  \
                --fasta {input.ref} \
                --sample {params.proband} \
                --ped {input.ped} \
                --sites {output.bed} \
                {input.bam} > {output.html}
        else
            echo -n > {output.bed}
            echo -n > {output.html}
        fi
    """

### extract bed file for HipSTR recall
rule bedfile_for_hipstr_call:
    input: 
        tab=output_dir +"/joint_STR/gangstr_hipstsr.final.tab",
        ref_panel = hipstr_panel
    output: 
        tmp = temp(output_dir + "/vizlan/{fam}/{fam}_recall.tmp"),
        bed = output_dir + "/vizaln/{fam}/{fam}_recall.bed"
    shell: """
        awk -v FS='\\t' -v OFS='\\t' '{{if(NR>1 && $5=="{wildcards.fam}") print $1, $2}}' {input.tab} | sed 's/^/chr/' > {output.tmp}
        if [ -s {output.tmp} ]; then 
            grep -f {output.tmp} {input.ref_panel} > {output.bed}
        else
            echo -n > {output.bed}
        fi
    """

rule hipstr_recall:
    input: 
        bams = lambda w: expand("output/fixed-rg/{id}.bam", id= [person.id for person in families[w.fam]]),
        ref=hg38_ref,
        reg = output_dir + "/vizaln/{fam}/{fam}_recall.bed"
    output:
        vcf = output_dir + "/vizaln/{fam}/{fam}.vcf.gz",
        viz = output_dir + "/vizaln/{fam}/{fam}.aln.viz.gz"
    resources:
        runtime="2h",
        mem_mb=10000
    log: output_dir + "/vizaln/{fam}/{fam}.hipstr.log"
    params:
        bams=lambda w, input: ",".join(input.bams)
    envmodules: "hipstr", "bcftools"
    shell: """
        HipSTR  --output-gls --bams  {params.bams} --fasta {input.ref} --regions  {input.reg} --str-vcf  {output.vcf} --viz-out {output.viz} --def-stutter-model  --log  {log}
        tabix -p bed {output.viz}
        tabix -p vcf {output.vcf}
    """

checkpoint scatter_chr_pos:
    input: 
        output_dir + "/vizaln/{fam}/{fam}.vcf.gz"
    output:
        directory(output_dir + "/vizaln/{fam}/variants/")
    shell: """
        mkdir -p {output}
        zgrep -v "^#" {input}  | awk -v FS='\\t' 'system("touch {output}/"$1"_"$2".dnm")'
    """

rule vizaln:
    input: 
        dummy=output_dir + "/vizaln/{fam}/variants/{chr}_{pos}.dnm",
        viz=output_dir + "/vizaln/{fam}/{fam}.aln.viz.gz"
    output: 
        output_dir + "/vizaln/{fam}/variants/{chr}_{pos}.html"
    shell: q"""
        ./HipSTR/VizAln_rev {input.viz} {output} {wildcards.chr} {wildcards.pos}
    """

def aggregate_input(wildcards):
    checkpoint_output = checkpoints.scatter_chr_pos.get(**wildcards).output[0]
    return expand(output_dir + "/vizaln/{fam}/variants/{chr_pos}.html",
           fam=wildcards.fam,
           chr_pos=glob_wildcards(os.path.join(checkpoint_output, "{chr_pos}.dnm")).chr_pos)


rule aggregate_visaln:
    input: aggregate_input
    output: 
        output_dir + "/vizaln/{fam}/DONE"
    shell: """
        touch {output}
    """