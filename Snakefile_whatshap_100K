import glob
import peds 
import uuid

### configure
output_dir="output"
wgs_interval= "ref/hg38.wgs_interval.bed"
hg38_ref="ref/Homo_sapiens_assembly38.fasta"
ref_dict=os.path.splitext(hg38_ref)[0]+'.dict'
ref_fai = hg38_ref +'.fai'
WIN=100000 # 10K window to phase DNM

### Define trios
ped_dir = "ped_files"
ped_files = glob.glob(ped_dir + "/*.ped")

families = {}
for fn in ped_files:
    f=peds.open_ped(fn)[0]
    families[f.id]=f

fam_ids = [line.strip() for line in open("8trios.lst", "r")]

child_ids = [[person.id for person in families[fid] if families[fid].get_father(person) ][0] for fid in fam_ids]

CHILD_DICT=dict(zip(fam_ids,child_ids))
# print (CHILD_DICT)
# exit(0)

rule all:
    input:
        # expand(output_dir +"/phase_DNMs/{fam}.phase_child.vcf.gz", fam=fam_ids),
        # expand(output_dir +"/phase_DNMs/{fam}.phase_trios.vcf.gz", fam=fam_ids),
        # expand(output_dir + "/phase_DNMs/{fam}/", fam=fam_ids),
        # output_dir + "/phase_DNMs/t0474/t0474.chr10_12177172.phase_child.vcf.gz",
        # output_dir + "/phase_DNMs/t0474/t0474.chr10_12177172.phase_trios.vcf.gz"
        # expand(output_dir + "/phase_DNMs/{fam}.vcf4phase.vcf.gz", fam=fam_ids),
        expand(output_dir + "/phase_DNMs/{fam}.parental_origin.tab", fam=fam_ids)

## scatter
checkpoint scatter_dnms:
    input: output_dir +"/GATK_DV/D_and_G.{fam}.dnm.vcf.gz"
    output:
        directory(output_dir + "/phase_DNMs/{fam}/variants")
    shell: """
        mkdir -p {output}
        zgrep -v "^#" {input}  | awk -v FS='\\t' -v OFS=':' '{{out="{output}/"$1"_"$2".dnm"; print $1,$2,$4,$5 >out}}'
    """

### prepare the VCF of the trios for phasing
# rule vcf4phase: 
#     input:
#         site=output_dir +"/GATK_DV/D_and_G.{fam}.dnm.vcf.gz",
#         vcf = output_dir +"/glnexus/{fam}.dv_combined.vcf.gz",
#         genome=ref_fai
#     output:
#         bed=output_dir + "/phase_DNMs/{fam}_DNM_ext.bed",
#         vcf=output_dir + "/phase_DNMs/{fam}.vcf4phase.vcf.gz",
#         tbi=output_dir + "/phase_DNMs/{fam}.vcf4phase.vcf.gz.tbi",
#         vid=output_dir + "/phase_DNMs/{fam}_DNM_vid.txt"
#     envmodules: "bedtools","bcftools"
#     resources: 
#         mem_mb = 20000,
#         runtime= "4h"
#     params: 
#         window= WIN
#     shell: """
#         bcftools query -f '%CHROM\\t%POS0\\t%END\\n' {input.site} | bedtools slop  -b {params.window} -g {input.genome} | bedtools merge > {output.bed}
#         bcftools query -f '%CHROM:%POS:%REF:%ALT\\n' {input.site} > {output.vid}
#         bcftools view -R {output.bed} {input.vcf} | bcftools annotate -Oz -x ID -I +"%CHROM:%POS:%REF:%ALT" -o {output.vcf};
#         tabix {output.vcf};
#     """

## process for each DNM
rule vcf4phase:
    input:
        dnm = output_dir + "/phase_DNMs/{fam}/variants/{chr}_{pos}.dnm",
        vcf=output_dir +"/glnexus/{fam}.dv_combined.vcf.gz"
    output:
        vcf=output_dir + "/phase_DNMs/{fam}/variants/DV.{chr}_{pos}.vcf.gz",
        tbi=output_dir + "/phase_DNMs/{fam}/variants/DV.{chr}_{pos}.vcf.gz.tbi"
    envmodules: "bcftools"
    resources: 
        mem_mb = 20000,
        runtime= "2h"
    params: 
        reg= lambda w: '%s:%d-%d' % (w.chr, int(w.pos)-WIN, int(w.pos)+WIN)
    shell: """
        bcftools view -r {params.reg} {input.vcf} | bcftools annotate -Oz -x ID -I +"%CHROM:%POS:%REF:%ALT" -Oz -o {output.vcf};
        tabix {output.vcf};
    """

rule phase_child:
    input: 
        bams=lambda w: expand(output_dir +"/cram/{id}.cram", id=[CHILD_DICT[w.fam]]),
        bais=lambda w: expand(output_dir +"/cram/{id}.cram.crai", id=[CHILD_DICT[w.fam]]),
        ref=hg38_ref,
        vcf = output_dir + "/phase_DNMs/{fam}/variants/DV.{chr}_{pos}.vcf.gz"
    output: 
        vcf= output_dir +"/phase_DNMs/{fam}/variants/{fam}.{chr}_{pos}.phase_child.vcf.gz"
    params:
        id = lambda w: CHILD_DICT[w.fam]
    resources: 
        threads=2,
        mem_mb = 40*1000,
        runtime= "4h"
    shell: """
        whatshap phase -o {output.vcf} --tag=PS --indels --reference={input.ref} --sample {params.id} {input.vcf} {input.bams}
    """

rule phase_trios:
    input: 
        bams=lambda w: expand(output_dir +"/cram/{id}.cram", id=[person.id for person in families[w.fam]]),
        bais=lambda w: expand(output_dir +"/cram/{id}.cram.crai", id=[person.id for person in families[w.fam]]),
        ped=ped_dir + "/{fam}.ped",
        ref=hg38_ref,
        vcf = output_dir + "/phase_DNMs/{fam}/variants/DV.{chr}_{pos}.vcf.gz"
    output: 
        vcf= output_dir +"/phase_DNMs/{fam}/variants/{fam}.{chr}_{pos}.phase_trios.vcf.gz"
    resources: 
        threads=2,
        mem_mb = 40*1000,
        runtime= "8h"
    shell: """
        whatshap phase -o {output.vcf} --tag=PS --indels --ped {input.ped} --reference={input.ref} {input.vcf} {input.bams} 
    """

rule extract_parental_origin:
    input:
        dnm = output_dir + "/phase_DNMs/{fam}/variants/{chr}_{pos}.dnm",
        ped = ped_dir + "/{fam}.ped",
        phase_child = output_dir +"/phase_DNMs/{fam}/variants/{fam}.{chr}_{pos}.phase_child.vcf.gz",
        phase_trios = output_dir +"/phase_DNMs/{fam}/variants/{fam}.{chr}_{pos}.phase_trios.vcf.gz"
    output:
        output_dir + "/phase_DNMs/{fam}/variants/{chr}_{pos}.parental_origin.txt"
    resources: 
        mem_mb = 4*1000,
        runtime= "2h"
    shell: """
        perl scripts/extract_parental_origin.pl  {input.dnm} {input.ped} {input.phase_child} {input.phase_trios} {output}
    """

def aggregate_input(wildcards):
    checkpoint_output = checkpoints.scatter_dnms.get(**wildcards).output[0]
    return expand(output_dir + "/phase_DNMs/{fam}/variants/{chr_pos}.parental_origin.txt",
           fam=wildcards.fam,
           chr_pos=glob_wildcards(os.path.join(checkpoint_output, "{chr_pos}.dnm")).chr_pos)


### should be replace "_" with ":" after VID is fixed
rule aggregate_phase:
    input: aggregate_input
    output: 
        output_dir + "/phase_DNMs/{fam}.parental_origin.tab"
    shell: """
        cat {input} | sort -t ":"  -Vs -k1,1 -k2,2n > {output}
    """
